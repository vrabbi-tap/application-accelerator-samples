
#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ def in_list(key, list):
#@  return hasattr(data.values.tap_values, key) and (data.values.tap_values[key] in list)
#@ end
#@ def in_attr_list(key, list):
#@  return hasattr(data.values, key) and (data.values[key] in list)
#@ end
#@ if in_list('supply_chain', ['testing_scanning']) and in_list('profile', ['full', 'build']):
#@ if in_attr_list('scanner', ['prisma']):
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: "grype-scanner-prisma"
  namespace: tap-install
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
spec:
  packageRef:
    refName: prisma.scanning.apps.tanzu.vmware.com
    versionSelection:
      constraints: 0.1.4-alpha.6
      prereleases: {}
  serviceAccountName: tap-install-sa
  values:
  - secretRef:
      name: #@ "grype-scanner-prisma-" + data.values.name

#@ def prisma_values():
#@   prisma_values = {}
#@   prisma_values["namespace"] = data.values.name
#@   prisma_values["prisma"] = {}
#@   prisma_values["prisma"]["url"] = "https://europe-west3.cloud.twistlock.com/eu-158061"
#@   prisma_values["prisma"]["basicAuth"] = {}
#@   prisma_values["prisma"]["basicAuth"]["name"] = "prisma-creds"
#@   prisma_values["metadataStore"] = {}
#@   prisma_values["metadataStore"]["caSecret"] = {}
#@   prisma_values["metadataStore"]["caSecret"]["importFromNamespace"] = ""
#@   prisma_values["metadataStore"]["authSecret"] = {}
#@   prisma_values["metadataStore"]["authSecret"]["importFromNamespace"] = ""

#@   return prisma_values
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  #! name will be updated by the expansion template
  name: "grype-scanner-prisma"
  namespace: tap-install
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
stringData:
  values.yml: #@ yaml.encode(prisma_values())
---
apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
kind: ScanPolicy
metadata:
  name: prisma-scan-policy
  labels:
    'app.kubernetes.io/part-of': 'enable-in-gui'
spec:
  regoFile: |
    package main

    # Accepted Values: "Critical", "High", "Medium", "Low", "Negligible", "UnknownSeverity"
    notAllowedSeverities := []
    ignoreCves := []

    contains(array, elem) = true {
      array[_] = elem
    } else = false { true }

    isSafe(match) {
      severities := { e | e := match.ratings.rating.severity } | { e | e := match.ratings.rating[_].severity }
      some i
      fails := contains(notAllowedSeverities, severities[i])
      not fails
    }

    isSafe(match) {
      ignore := contains(ignoreCves, match.id)
      ignore
    }

    deny[msg] {
      comps := { e | e := input.bom.components.component } | { e | e := input.bom.components.component[_] }
      some i
      comp := comps[i]
      vulns := { e | e := comp.vulnerabilities.vulnerability } | { e | e := comp.vulnerabilities.vulnerability[_] }
      some j
      vuln := vulns[j]
      ratings := { e | e := vuln.ratings.rating.severity } | { e | e := vuln.ratings.rating[_].severity }
      not isSafe(vuln)
      msg = sprintf("CVE %s %s %s", [comp.name, vuln.id, ratings])
    }
---
apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
kind: ScanPolicy
metadata:
  name: prisma-enforced-scan-policy
  labels:
    'app.kubernetes.io/part-of': 'enable-in-gui'
spec:
  regoFile: |
    package main
    
    import future.keywords.in
    import future.keywords.if
    
    failedPrismaComplianceOrVulnerabilityChecks(metadata) {
      x := false in cast_set(metadata.properties.property)
      x
    }

    deny[msg] {
      failedPrismaComplianceOrVulnerabilityChecks(input.bom.metadata)
      vulnerabilityMessages := { message |
        components := {e | e := input.bom.components.component} | {e | e := input.bom.components.component[_]}
        some component in components
        vulnerabilities := {e | e := component.vulnerabilities.vulnerability} | {e | e := component.vulnerabilities.vulnerability[_]}
        some vulnerability in vulnerabilities
        ratings := {e | e := vulnerability.ratings.rating.severity} | {e | e := vulnerability.ratings.rating[_].severity}
        formattedRatings := concat(", ", ratings)
        message := sprintf("Vulnerability - Component: %s CVE: %s Severity: %s", [component.name, vulnerability.id, formattedRatings])
      }
      complianceMessages := { message |
        compliances := {e | e := input.bom.metadata.component.compliances.compliance} | {e | e := input.bom.metadata.component.compliances.compliance[_]}
        some compliance in compliances
        message := sprintf("Compliance - %s \\\nId: %s Severity: %s Category: %s", [compliance.title, compliance.id, compliance.severity, compliance.category])
      }
      combinedMessages := complianceMessages | vulnerabilityMessages
      some message in combinedMessages
      msg := message
    }
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretImport
metadata:
  name: prisma-creds
spec:
  fromNamespace: tap-install
#@ end
#@ if in_attr_list('scanner', ['trivy']):
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: "grype-scanner-trivy"
  namespace: tap-install
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
spec:
  packageRef:
    refName: trivy.scanning.apps.tanzu.vmware.com
    versionSelection:
      constraints: 0.1.4-alpha.7
      prereleases: {}
  serviceAccountName: tap-install-sa
  values:
  - secretRef:
      name: #@ "grype-scanner-trivy-" + data.values.name

#@ def trivy_values():
#@   trivy_values = {}
#@   trivy_values["namespace"] = data.values.name
#@   trivy_values["metadataStore"] = {}
#@   trivy_values["metadataStore"]["caSecret"] = {}
#@   trivy_values["metadataStore"]["caSecret"]["importFromNamespace"] = ""
#@   trivy_values["metadataStore"]["authSecret"] = {}
#@   trivy_values["metadataStore"]["authSecret"]["importFromNamespace"] = ""

#@   return trivy_values
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  #! name will be updated by the expansion template
  name: "grype-scanner-trivy"
  namespace: tap-install
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
stringData:
  values.yml: #@ yaml.encode(trivy_values())
---
apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
kind: ScanPolicy
metadata:
   name: trivy-scan-policy
   labels:
      app.kubernetes.io/part-of: enable-in-gui
spec:
   regoFile: |
      package main

      import future.keywords.in
      import future.keywords.every

      # Accepted Values: "critical", "high", "medium", "low", unknown"
      notAllowedSeverities := ["critical", "high", "unknown"]
      notAllowedSet := {x | x := notAllowedSeverities[_]}
      ignoreCves := []

      isSafe(match) {
        severities := { e | e := match.ratings.rating.severity } | { e | e := match.ratings.rating[_].severity }
        every severity in severities {
            not severity in notAllowedSet
        }
      }

      isIgnored(match) {
        match.id in ignoreCves
      }

      deny[msg] {
        notAllowedVulnerabilities := { vulnerability |
          vulnerabilities := {e | e := input.bom.vulnerabilities.vulnerability} | {e | e := input.bom.vulnerabilities.vulnerability[_]}
          some vulnerability in vulnerabilities
          not isIgnored(vulnerability)
          not isSafe(vulnerability)
        }
        formattedVulnerabilityMessages := { message |
          some vulnerability in notAllowedVulnerabilities
          ratings := {e | e := vulnerability.ratings.rating.severity} | {e | e := vulnerability.ratings.rating[_].severity}
          formattedRatings := concat(", ", ratings)
          affectedComponents := {e | e := vulnerability.affects.target.ref} | {e | e := vulnerability.affects.target[_].ref}
          formattedComponents := concat("\\\n", affectedComponents)
          message = sprintf("CVE: %s \\\nRatings: %s\\\nAffected Components: \\\n%s", [vulnerability.id, formattedRatings, formattedComponents])
        }
        some formattedVulnerabilityMessage in formattedVulnerabilityMessages
        msg := formattedVulnerabilityMessage
      }
#@ end
#@ end
