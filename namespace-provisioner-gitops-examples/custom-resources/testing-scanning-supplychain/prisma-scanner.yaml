
#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ def in_list(key, list):
#@  return hasattr(data.values.tap_values, key) and (data.values.tap_values[key] in list)
#@ end
#@ if in_list('supply_chain', ['testing_scanning']) and in_list('profile', ['full', 'build']):
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: "grype-scanner-prisma"
  namespace: tap-install
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
spec:
  packageRef:
    refName: prisma.scanning.apps.tanzu.vmware.com
    versionSelection:
      constraints: 0.1.4-alpha.6
      prereleases: {}
  serviceAccountName: tap-install-sa
  values:
  - secretRef:
      name: #@ "grype-scanner-prisma-" + data.values.name

#@ def prisma_values():
#@   prisma_values = {}
#@   prisma_values["namespace"] = data.values.name
#@   prisma_values["prisma"] = {}
#@   prisma_values["prisma"]["url"] = "https://europe-west3.cloud.twistlock.com/eu-158061"
#@   prisma_values["prisma"]["basicAuth"] = {}
#@   prisma_values["prisma"]["basicAuth"]["name"] = "prisma-creds"
#@   prisma_values["metadataStore"] = {}
#@   prisma_values["metadataStore"]["caSecret"] = {}
#@   prisma_values["metadataStore"]["caSecret"]["importFromNamespace"] = ""
#@   prisma_values["metadataStore"]["authSecret"] = {}
#@   prisma_values["metadataStore"]["authSecret"]["importFromNamespace"] = ""

#@   return prisma_values
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  #! name will be updated by the expansion template
  name: "grype-scanner-prisma"
  namespace: tap-install
  annotations:
    kapp.k14s.io/create-strategy: fallback-on-update
stringData:
  values.yml: #@ yaml.encode(prisma_values())
---
apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
kind: ScanPolicy
metadata:
  name: prisma-scan-policy
  labels:
    'app.kubernetes.io/part-of': 'enable-in-gui'
spec:
  regoFile: |
    package main

    # Accepted Values: "Critical", "High", "Medium", "Low", "Negligible", "UnknownSeverity"
    notAllowedSeverities := []
    ignoreCves := []

    contains(array, elem) = true {
      array[_] = elem
    } else = false { true }

    isSafe(match) {
      severities := { e | e := match.ratings.rating.severity } | { e | e := match.ratings.rating[_].severity }
      some i
      fails := contains(notAllowedSeverities, severities[i])
      not fails
    }

    isSafe(match) {
      ignore := contains(ignoreCves, match.id)
      ignore
    }

    deny[msg] {
      comps := { e | e := input.bom.components.component } | { e | e := input.bom.components.component[_] }
      some i
      comp := comps[i]
      vulns := { e | e := comp.vulnerabilities.vulnerability } | { e | e := comp.vulnerabilities.vulnerability[_] }
      some j
      vuln := vulns[j]
      ratings := { e | e := vuln.ratings.rating.severity } | { e | e := vuln.ratings.rating[_].severity }
      not isSafe(vuln)
      msg = sprintf("CVE %s %s %s", [comp.name, vuln.id, ratings])
    }
#@ end
